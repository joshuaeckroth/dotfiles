(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(c-basic-offset 4)
 '(c-default-style (quote ((java-mode . "java") (awk-mode . "awk") (other . "bsd"))))
 '(jde-jdk (list "1.6.0.20"))
 '(jde-jdk-registry (quote (("1.6.0.20" . "/usr/lib/jvm/java-6-sun-1.6.0.20"))))
 '(js2-auto-indent-flag nil)
 '(js2-bounce-indent-flag t)
 '(js2-enter-indents-newline nil)
 '(js2-mirror-mode nil)
 '(js2-rebind-eol-bol-keys nil)
 '(muse-html-style-sheet "<style type=\"text/css\">
body {
  background: white; color: black;
  margin-left: 3%; margin-right: 7%;
  line-height: 1.5;
  font-family: Nimbus Sans L, sans;
}

p { margin-top: 1% }
p.verse { margin-left: 3% }

.example { margin-left: 3% }

li { margin: 0.5em 0; }

h2 {
  margin-top: 25px;
  margin-bottom: 0px;
}
h3 { margin-bottom: 0px; }

pre {
  border: 1px solid #ccc;
  margin: 5px;
  padding: 5px;
}

td {
  border-top: 1px solid #ccc;
  border-bottom: 1px solid #ccc;
}

code { color: #bc8f8f; font-weight: bold; }
    </style>")
 '(muse-html-table-attributes " class=\"muse-table\" border=\"0\" cellpadding=\"5\" cellspacing=\"0\"")
 '(muse-latex2png-scale-factor 1.3)
 '(uniquify-buffer-name-style (quote post-forward-angle-brackets) nil (uniquify)))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "white" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 83 :width normal :foundry "unknown" :family "Liberation Mono")))))

(tool-bar-mode -1)
(set-scroll-bar-mode 'right)
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)
(setq line-number-mode t)
(setq column-number-mode t)
(line-number-mode t)
(column-number-mode t)
(global-font-lock-mode t)
(show-paren-mode t)
(setq show-paren-delay 0.0)
(setq show-paren-style 'parenthesis)
(fset 'yes-or-no-p 'y-or-n-p)

(setq make-backup-files nil)
(setq auto-save-default nil)

(setq-default indent-tabs-mode nil)
(blink-cursor-mode nil)

;;(add-to-list 'load-path "~/.emacs.d/color-theme-6.6.0")
;;(require 'color-theme)
;;(eval-after-load "color-theme"
;;  '(progn
;;     (color-theme-initialize)
;;     (color-theme-gray30)))



;; clojure-mode
(add-to-list 'load-path "~/Documents/github/clojure-mode")
(require 'clojure-mode)

;; slime
(eval-after-load "slime" 
  '(progn (slime-setup '(slime-repl))))

(add-to-list 'load-path "~/Documents/github/slime")
(require 'slime)
(slime-setup)

(add-to-list 'load-path "~/Documents/github/swank-clojure-extra")
(require 'swank-clojure-extra)


(add-to-list 'load-path "~/.emacs.d")
(autoload 'paredit-mode "paredit-beta-custom"
  "Minor mode for pseudo-structurally editing Lisp code." t)
(add-hook 'emacs-lisp-mode-hook       (lambda () (paredit-mode +1)))
(add-hook 'lisp-mode-hook             (lambda () (paredit-mode +1)))
(add-hook 'lisp-interaction-mode-hook (lambda () (paredit-mode +1)))
(add-hook 'clojure-mode-hook          (lambda () (paredit-mode +1)))
(add-hook 'slime-repl-mode-hook       (lambda () (paredit-mode +1)))

(defun slime-clojure-repl-setup () 
  (when (string-equal "clojure" (slime-connection-name)) 
    (clojure-mode-font-lock-setup) 
    (when (slime-inferior-process) 
      (slime-redirect-inferior-output)) 
    (swank-clojure-slime-repl-modify-syntax)))
(add-hook 'slime-repl-mode-hook 'slime-clojure-repl-setup)

;; Stop SLIME's REPL from grabbing DEL,
;; which is annoying when backspacing over a '('
(defun override-slime-repl-bindings-with-paredit ()
  (define-key slime-repl-mode-map
    (read-kbd-macro paredit-backward-delete-key) nil))
(add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit)

(defun lein-swank () 
  (interactive) 
  (let ((root (locate-dominating-file default-directory "project.clj"))) 
    (when (not root) 
      (error "Not in a Leiningen project.")) 
    ;; you can customize slime-port using .dir-locals.el 
    (shell-command (format "cd %s && ~/Documents/github/leiningen/bin/lein swank %s &"
			   root slime-port) 
                   "*lein-swank*") 
    (set-process-filter (get-buffer-process "*lein-swank*") 
                        (lambda (process output) 
                          (when (string-match "Connection opened on" output) 
                            (slime-connect "localhost" slime-port) 
                            (set-process-filter process nil)))) 
    (message "Starting swank server...")))

(setq slime-protocol-version 'ignore) 


(add-to-list 'load-path "~/Documents/github/magit/installed/share/emacs/site-lisp")
(autoload 'magit-status "magit" nil t)

(require 'uniquify)

;; (iswitchb-mode 1)
;; (setq iswitchb-buffer-ignore '("^ " "*Buffer" "^\*magit" "^\*Customize"
;; 			       "^\*Completions" "^\*Messages" "^\*Help"
;; 			       "\*scratch\*" "\*GNU Emacs\*"))
;; (setq iswitchb-default-method 'samewindow)
;; (defun iswitchb-local-keys ()
;;   (mapc (lambda (K) 
;; 	  (let* ((key (car K)) (fun (cdr K)))
;; 	    (define-key iswitchb-mode-map (edmacro-parse-keys key) fun)))
;; 	'(("<right>" . iswitchb-next-match)
;; 	  ("<left>"  . iswitchb-prev-match)
;; 	  ("<up>"    . ignore             )
;; 	  ("<down>"  . ignore             ))))
;; (add-hook 'iswitchb-define-mode-map-hook 'iswitchb-local-keys)

;; (defadvice iswitchb-kill-buffer (after rescan-after-kill activate)
;;   "*Regenerate the list of matching buffer names after a kill.
;;     Necessary if using `uniquify' with `uniquify-after-kill-buffer-p'
;;     set to non-nil."
;;   (setq iswitchb-buflist iswitchb-matches)
;;   (iswitchb-rescan))
;; (defun iswitchb-rescan ()
;;   "*Regenerate the list of matching buffer names."
;;   (interactive)
;;   (iswitchb-make-buflist iswitchb-default)
;;   (setq iswitchb-rescan t))


;; muse
(require 'muse-mode)     ; load authoring mode

(require 'muse-html)     ; load publishing styles
(require 'muse-latex)
(require 'muse-docbook)
(require 'muse-latex2png-modified) ; in emacs.d, local modifications
(require 'muse-colors)   ; in emacs.d, local modifications

(require 'muse-project)  ; publish files in projects


(setq muse-project-alist
      '(("miscellany" ("~/Documents/miscellany/content" :default "index")
         (:base "html" :path "~/Documents/miscellany/html"))
	("cse202" ("~/Documents/cse202/gh-pages" :default "CSE 202")
	 (:base "html" :path "~/Documents/cse202/gh-pages"))))


;; wanderlust
(autoload 'wl "wl" "Wanderlust" t)
(autoload 'wl-other-frame "wl" "Wanderlust on new frame." t)
(autoload 'wl-draft "wl-draft" "Write draft with Wanderlust." t)

(autoload 'wl-user-agent-compose "wl-draft" nil t)
(if (boundp 'mail-user-agent)
    (setq mail-user-agent 'wl-user-agent))
(if (fboundp 'define-mail-user-agent)
    (define-mail-user-agent
      'wl-user-agent
      'wl-user-agent-compose
      'wl-draft-send
      'wl-draft-kill
      'mail-send-hook))

(require 'w3m-ems)
(require 'mime-w3m)


(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t)


;; jdee
(add-to-list 'load-path "~/.emacs.d/jdee-2.4.0.1/lisp")
(add-to-list 'load-path "~/.emacs.d/cedet-1.0/common")
(load-file "~/.emacs.d/cedet-1.0/common/cedet.el")
(add-to-list 'load-path "~/.emacs.d/elib-1.0")

(setq defer-loading-jde t)
(if defer-loading-jde
    (progn
      (autoload 'jde-mode "jde" "JDE mode." t)
      (setq auto-mode-alist
	    (append
	     '(("\\.java\\'" . jde-mode))
	     auto-mode-alist)))
  (require 'jde))

(defun remove-dos-eol ()
  "Removes the disturbing '^M' showing up in files containing mixed UNIX and DOS line endings."
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M []))

(defun my-jde-mode-hook ()
  (setq c-basic-offset 4)
  (remove-dos-eol))

(add-hook 'jde-mode-hook 'my-jde-mode-hook)
